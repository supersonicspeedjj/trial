{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from \"./Constants.types\";\nimport ExponentConstants from \"./ExponentConstants\";\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\nvar rawManifest = null;\nif (NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\nif (NativeModules.EXDevLauncher) {\n  var devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\nvar _ref = ExponentConstants || {},\n  name = _ref.name,\n  appOwnership = _ref.appOwnership,\n  nativeConstants = _objectWithoutProperties(_ref, [\"name\", \"appOwnership\"]);\nvar warnedAboutInstallationId = false;\nvar warnedAboutDeviceId = false;\nvar warnedAboutLinkingUrl = false;\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null,\n  get installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\"Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.\");\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  get deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\"Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.\");\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  get linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\"Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.\");\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n  get manifest() {\n    var maybeManifest = getManifest();\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  get manifest2() {\n    var maybeManifest = getManifest();\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  get __unsafeNoWarnManifest() {\n    return getManifest(true);\n  },\n  get __rawManifest_TEST() {\n    return rawManifest;\n  },\n  set __rawManifest_TEST(value) {\n    rawManifest = value;\n  }\n});\nfunction isAppManifest(manifest) {\n  return !isManifest(manifest);\n}\nfunction isManifest(manifest) {\n  return 'metadata' in manifest;\n}\nfunction getManifest() {\n  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (!rawManifest) {\n    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(\"Constants.manifest is \" + invalidManifestType + \" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");\n      }\n    } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n      throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', \"Constants.manifest is \" + invalidManifestType + \", must be an object.\");\n    }\n  }\n  return rawManifest;\n}\nexport default constants;","map":{"version":3,"names":["CodedError","NativeModulesProxy","Platform","NativeModules","AppOwnership","ExecutionEnvironment","UserInterfaceIdiom","ExponentConstants","console","warn","rawManifest","ExpoUpdates","updatesManifest","manifest","manifestString","JSON","parse","Object","keys","length","EXDevLauncher","devLauncherManifest","_ref","name","appOwnership","nativeConstants","_objectWithoutProperties","warnedAboutInstallationId","warnedAboutDeviceId","warnedAboutLinkingUrl","constants","_objectSpread","installationId","deviceId","linkingUrl","linkingUri","maybeManifest","getManifest","isAppManifest","manifest2","isManifest","__unsafeNoWarnManifest","__rawManifest_TEST","value","suppressWarning","arguments","undefined","invalidManifestType","executionEnvironment","Bare","OS","StoreClient","Standalone"],"sources":["C:\\Users\\Lenovo\\Downloads\\meme-generator-main\\meme-generator-main\\node_modules\\expo-constants\\src\\Constants.ts"],"sourcesContent":["import { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  Manifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawManifest: AppManifest | Manifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutInstallationId = false;\nlet warnedAboutDeviceId = false;\nlet warnedAboutLinkingUrl = false;\n\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  // Deprecated fields\n  get installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\n        `Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.`\n      );\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  // Legacy aliases\n  get deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\n        `Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.`\n      );\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  get linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\n        `Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.`\n      );\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n  get manifest(): AppManifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  get manifest2(): Manifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  get __unsafeNoWarnManifest(): AppManifest | Manifest | null {\n    return getManifest(true);\n  },\n  get __rawManifest_TEST(): AppManifest | Manifest | null {\n    return rawManifest;\n  },\n  set __rawManifest_TEST(value: AppManifest | Manifest | null) {\n    rawManifest = value;\n  },\n} as Constants;\n\nfunction isAppManifest(manifest: AppManifest | Manifest): manifest is AppManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: AppManifest | Manifest): manifest is Manifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): AppManifest | Manifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}