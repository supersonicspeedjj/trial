{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Downloads\\\\meme-generator-main\\\\meme-generator-main\\\\components\\\\SharePhotoButton.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport { captureRef } from \"react-native-view-shot\";\nexport default function SharePhotoButton(_ref) {\n  var memeView = _ref.memeView;\n  return React.createElement(Button, {\n    title: \"Share Meme\",\n    onPress: function onPress() {\n      return shareAsync(memeView);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 10\n    }\n  });\n}\nfunction shareAsync(memeView) {\n  var imgUri, cloudUri;\n  return _regeneratorRuntime.async(function shareAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (memeView.current) {\n          _context.next = 3;\n          break;\n        }\n        console.log(\"The memeView is not rendered yet, cannot share\");\n        return _context.abrupt(\"return\");\n      case 3:\n        _context.next = 5;\n        return _regeneratorRuntime.awrap(captureRef(memeView, {\n          format: \"png\",\n          quality: 0.5,\n          result: \"data-uri\"\n        }));\n      case 5:\n        imgUri = _context.sent;\n        _context.next = 8;\n        return _regeneratorRuntime.awrap(uploadImageAsync(imgUri));\n      case 8:\n        cloudUri = _context.sent;\n        console.log(\"meme uploaded to\", cloudUri);\n        Share.share({\n          url: cloudUri\n        });\n      case 11:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction uploadImageAsync(uri) {\n  var formData, response, responseJson, url;\n  return _regeneratorRuntime.async(function uploadImageAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        formData = new FormData();\n        formData.append(\"image\", {\n          uri: uri,\n          name: \"upload.png\",\n          type: \"image/png\"\n        });\n        _context2.next = 4;\n        return _regeneratorRuntime.awrap(fetch(\"https://api.imgur.com/3/image\", {\n          method: \"POST\",\n          body: formData,\n          headers: {\n            Authorization: \"Client-ID 658d72e5b4a0c6b\"\n          }\n        }));\n      case 4:\n        response = _context2.sent;\n        _context2.next = 7;\n        return _regeneratorRuntime.awrap(response.json());\n      case 7:\n        responseJson = _context2.sent;\n        console.log(responseJson);\n        url = responseJson.data.link;\n        return _context2.abrupt(\"return\", url);\n      case 11:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["React","Button","Share","captureRef","SharePhotoButton","_ref","memeView","createElement","title","onPress","shareAsync","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","imgUri","cloudUri","_regeneratorRuntime","async","shareAsync$","_context","prev","next","current","console","log","abrupt","awrap","format","quality","result","sent","uploadImageAsync","share","url","stop","Promise","uri","formData","response","responseJson","uploadImageAsync$","_context2","FormData","append","name","type","fetch","method","body","headers","Authorization","json","data","link"],"sources":["C:/Users/Lenovo/Downloads/meme-generator-main/meme-generator-main/components/SharePhotoButton.js"],"sourcesContent":["import * as React from \"react\";\nimport { Button, Share } from \"react-native\";\n\n// Converts a React View to a png\nimport { captureRef } from \"react-native-view-shot\";\n\nexport default function SharePhotoButton({ memeView }) {\n  return <Button title=\"Share Meme\" onPress={() => shareAsync(memeView)} />;\n}\n\nasync function shareAsync(memeView) {\n  if (!memeView.current) {\n    console.log(\"The memeView is not rendered yet, cannot share\");\n    return;\n  }\n  const imgUri = await captureRef(memeView, {\n    format: \"png\",\n    quality: 0.5,\n    result: \"data-uri\",\n  });\n\n  const cloudUri = await uploadImageAsync(imgUri);\n  console.log(\"meme uploaded to\", cloudUri);\n  Share.share({ url: cloudUri });\n}\n\nasync function uploadImageAsync(uri) {\n  const formData = new FormData();\n  formData.append(\"image\", {\n    uri: uri,\n    name: \"upload.png\",\n    type: \"image/png\",\n  });\n\n  const response = await fetch(\"https://api.imgur.com/3/image\", {\n    method: \"POST\",\n    body: formData,\n    headers: {\n      // replace with your own API key\n      Authorization: \"Client-ID 658d72e5b4a0c6b\",\n    },\n  });\n  let responseJson = await response.json();\n  console.log(responseJson);\n  let url = responseJson.data.link;\n\n  return url;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}